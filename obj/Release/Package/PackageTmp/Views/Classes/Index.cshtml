@model IEnumerable<StudentManagement.Models.Class>

@{
    ViewBag.Title = "Quản lý Lớp học";
}

<div class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm">
            <li>
                <a href="/Home/Statistics" class="text-gray-500 hover:text-gray-700 transition-colors duration-200">
                    <i class="fas fa-home mr-1"></i>Trang chủ
                </a>
            </li>
            <li class="flex items-center space-x-2">
                <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
                <span class="text-gray-700 font-medium">Danh sách lớp học</span>
            </li>
        </ol>
    </nav>

    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
        <div>
            <h2 class="text-2xl font-bold text-gray-800">DANH SÁCH LỚP HỌC</h2>
            <p class="text-gray-600 mt-1">Quản lý thông tin lớp học trong hệ thống</p>
        </div>
        <a href="@Url.Action("Create")" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition duration-200 shadow-sm hover:shadow-md">
            <i class="fas fa-plus mr-2"></i>
            <span>Thêm lớp học mới</span>
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">STT</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Khối</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tên Lớp</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Năm Học</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Giáo Viên Chủ Nhiệm</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tùy chọn</th>
                    </tr>
                </thead>
                <tbody id="classTableBody" class="bg-white divide-y divide-gray-200">
                    @foreach (var item in Model) {
                        <tr class="hover:bg-gray-50 transition-colors duration-200 cursor-pointer" onclick="showClassDetails(@item.ClassId)">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 row-number"></td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                <span class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                                    @(item.Department?.DepartmentCode ?? "N/A")
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@item.ClassName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@item.AcademicYear</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@item.HomeroomTeacher</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2" onclick="event.stopPropagation()">
                                <a href="@Url.Action("Edit", new { id = item.ClassId })" class="text-indigo-600 hover:text-indigo-900">Chỉnh sửa</a>
                                <a href="@Url.Action("Delete", new { id = item.ClassId })" class="text-red-600 hover:text-red-900">Xóa</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="bg-white px-6 py-4 flex items-center justify-between border-t border-gray-200 mt-4 rounded-lg shadow-sm">
        <div class="flex-1 flex justify-between sm:hidden">
            <button id="prevPageMobile" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-colors duration-200">
                <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                Trang trước
            </button>
            <button id="nextPageMobile" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-colors duration-200">
                Trang sau
                <svg class="h-5 w-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
            </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    Hiển thị <span id="startItem" class="font-medium">1</span> đến <span id="endItem" class="font-medium">10</span> của <span id="totalItems" class="font-medium">20</span> kết quả
                </p>
            </div>
            <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    <button id="prevPage" class="relative inline-flex items-center px-3 py-2 rounded-l-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        <span class="sr-only">Trang trước</span>
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                    </button>
                    <div id="pageNumbers" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700">
                        <!-- Page numbers will be inserted here -->
                    </div>
                    <button id="nextPage" class="relative inline-flex items-center px-3 py-2 rounded-r-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
                        <span class="sr-only">Trang sau</span>
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                    </button>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Class Details Modal -->
<div id="classDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-3 sm:p-5 border w-[95%] sm:w-[700px] shadow-2xl rounded-lg bg-white">
        <!-- Modal Header -->
        <div class="flex items-center justify-between border-b pb-3">
            <h3 class="text-lg sm:text-xl font-bold text-gray-900">THÔNG TIN LỚP HỌC</h3>
            <button id="closeModal" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <!-- Modal Content -->
        <div class="mt-4">
            <div id="classDetailsContent" class="text-sm">
                <!-- Content will be loaded here -->
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="mt-6 flex flex-col sm:flex-row items-center justify-between border-t pt-4 space-y-3 sm:space-y-0">
            <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
                <a id="viewStudentsLink" href="#" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                    <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                    Xem học sinh
                </a>
                <a id="editLink" href="#" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
                    <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    Chỉnh sửa
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-3 sm:p-5 border w-[95%] sm:w-[700px] shadow-2xl rounded-lg bg-white">
        <!-- Modal Header -->
        <div class="flex items-center justify-between border-b pb-3">
            <h3 class="text-lg sm:text-xl font-bold text-gray-900">XÓA LỚP HỌC</h3>
            <button id="closeDeleteModal" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <!-- Modal Content -->
        <div class="mt-4">
            <div id="deleteModalContent" class="text-sm">
                <!-- Content will be loaded here -->
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="mt-6 flex flex-col sm:flex-row items-center justify-between border-t pt-4 space-y-3 sm:space-y-0">
            <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
                <form id="deleteForm" method="post" action="" class="w-full sm:w-auto">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteClassId" name="id" />
                    <button type="submit" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200">
                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        XÓA
                    </button>
                </form>
                <button id="cancelDelete" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
                    Hủy
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const itemsPerPage = 10;
            let currentPage = 1;
            const tableBody = document.getElementById('classTableBody');
            const rows = Array.from(tableBody.getElementsByTagName('tr'));
            const totalItems = rows.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);

            function updateRowNumbers() {
                const startNumber = (currentPage - 1) * itemsPerPage + 1;
                let visibleIndex = 0;
                
                rows.forEach((row) => {
                    if (row.style.display !== 'none') {
                        const rowNumberCell = row.querySelector('.row-number');
                        if (rowNumberCell) {
                            rowNumberCell.textContent = startNumber + visibleIndex;
                            visibleIndex++;
                        }
                    }
                });
            }

            function updatePagination() {
                const startItem = (currentPage - 1) * itemsPerPage + 1;
                const endItem = Math.min(currentPage * itemsPerPage, totalItems);
                
                document.getElementById('startItem').textContent = startItem;
                document.getElementById('endItem').textContent = endItem;
                document.getElementById('totalItems').textContent = totalItems;

                // Update page numbers
                const pageNumbers = document.getElementById('pageNumbers');
                pageNumbers.innerHTML = '';
                
                // Calculate the range of page numbers to show
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);
                
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }

                // Add first page and ellipsis if needed
                if (startPage > 1) {
                    addPageButton(1);
                    if (startPage > 2) {
                        addEllipsis();
                    }
                }

                // Add page numbers
                for (let i = startPage; i <= endPage; i++) {
                    addPageButton(i);
                }

                // Add last page and ellipsis if needed
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        addEllipsis();
                    }
                    addPageButton(totalPages);
                }

                function addPageButton(pageNum) {
                    const pageButton = document.createElement('button');
                    pageButton.className = `relative inline-flex items-center px-4 py-2 text-sm font-medium transition-colors duration-200 ${
                        pageNum === currentPage 
                            ? 'text-white bg-blue-600 hover:bg-blue-700' 
                            : 'text-gray-700 hover:bg-gray-50'
                    }`;
                    pageButton.textContent = pageNum;
                    pageButton.onclick = () => goToPage(pageNum);
                    pageNumbers.appendChild(pageButton);
                }

                function addEllipsis() {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700';
                    ellipsis.textContent = '...';
                    pageNumbers.appendChild(ellipsis);
                }

                // Update button states
                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = currentPage === totalPages;
                document.getElementById('prevPageMobile').disabled = currentPage === 1;
                document.getElementById('nextPageMobile').disabled = currentPage === totalPages;

                // Update button styles based on disabled state
                const buttons = ['prevPage', 'nextPage', 'prevPageMobile', 'nextPageMobile'];
                buttons.forEach(id => {
                    const button = document.getElementById(id);
                    if (button.disabled) {
                        button.classList.add('opacity-50', 'cursor-not-allowed');
                        button.classList.remove('hover:bg-gray-50');
                    } else {
                        button.classList.remove('opacity-50', 'cursor-not-allowed');
                        button.classList.add('hover:bg-gray-50');
                    }
                });
            }

            function displayPage(page) {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                rows.forEach((row, index) => {
                    row.style.display = (index >= start && index < end) ? '' : 'none';
                });
                updateRowNumbers();
            }

            function goToPage(page) {
                currentPage = page;
                displayPage(currentPage);
                updatePagination();
            }

            // Event listeners for pagination buttons
            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) goToPage(currentPage - 1);
            });

            document.getElementById('nextPage').addEventListener('click', () => {
                if (currentPage < totalPages) goToPage(currentPage + 1);
            });

            document.getElementById('prevPageMobile').addEventListener('click', () => {
                if (currentPage > 1) goToPage(currentPage - 1);
            });

            document.getElementById('nextPageMobile').addEventListener('click', () => {
                if (currentPage < totalPages) goToPage(currentPage + 1);
            });

            // Initialize pagination
            updatePagination();
            displayPage(1);
        });

        function showClassDetails(classId) {
            const modal = document.getElementById('classDetailsModal');
            const content = document.getElementById('classDetailsContent');
            const viewStudentsLink = document.getElementById('viewStudentsLink');
            const editLink = document.getElementById('editLink');
            
            // Show loading state
            content.innerHTML = `
                <div class="flex items-center justify-center py-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                    <span class="ml-3 text-gray-600">Đang tải thông tin...</span>
                </div>
            `;
            modal.classList.remove('hidden');
            modal.classList.add('opacity-100');

            // Update action links
            viewStudentsLink.href = `/Students/Index?classId=${classId}`;
            editLink.href = `/Classes/Edit/${classId}`;

            // Fetch class details
            fetch(`/Classes/GetDetails/${classId}`)
                .then(response => response.json())
                .then(jsonString => {
                    const data = JSON.parse(jsonString);
                    console.log(data);
                    if (data.error) {
                        content.innerHTML = `
                            <div class="flex items-center justify-center py-8">
                                <svg class="h-8 w-8 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span class="text-red-500">${data.error}</span>
                            </div>
                        `;
                        return;
                    }
                    
                    content.innerHTML = `
                        <div class="bg-gray-50 rounded-lg p-3 sm:p-6">
                            <dl class="space-y-4">
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Khối:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.Department.DepartmentName || 'N/A'}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Tên Lớp:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900 font-semibold">${data.ClassName}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Năm Học:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.AcademicYear}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Giáo Viên Chủ Nhiệm:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.HomeroomTeacher}</dd>
                                </div>
                            </dl>
                        </div>
                    `;
                })
                .catch(error => {
                    content.innerHTML = `
                        <div class="flex items-center justify-center py-8">
                            <svg class="h-8 w-8 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span class="text-red-500">Có lỗi xảy ra khi tải thông tin lớp học.</span>
                        </div>
                    `;
                });
        }

        // Close modal when clicking the close button
        document.getElementById('closeModal').addEventListener('click', function() {
            document.getElementById('classDetailsModal').classList.add('hidden');
        });

        // Close modal when clicking outside
        document.getElementById('classDetailsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
            }
        });

        function showDeleteConfirmation(classId) {
            const modal = document.getElementById('deleteModal');
            const content = document.getElementById('deleteModalContent');
            const deleteForm = document.getElementById('deleteForm');
            const deleteClassId = document.getElementById('deleteClassId');
            
            // Show loading state
            content.innerHTML = `
                <div class="flex items-center justify-center py-8">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
                    <span class="ml-3 text-gray-600">Đang tải thông tin...</span>
                </div>
            `;
            modal.classList.remove('hidden');

            // Set the class ID for deletion
            deleteClassId.value = classId;
            deleteForm.action = `/Classes/Delete/${classId}`;

            // Fetch class details
            fetch(`/Classes/GetDetails/${classId}`)
                .then(response => response.json())
                .then(jsonString => {
                    const data = JSON.parse(jsonString);
                    if (data.error) {
                        content.innerHTML = `
                            <div class="flex items-center justify-center py-8">
                                <svg class="h-8 w-8 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span class="text-red-500">${data.error}</span>
                            </div>
                        `;
                        return;
                    }
                    
                    content.innerHTML = `
                        <div>
                            <h4 class="text-lg font-medium text-gray-900 mb-4">Thông tin lớp học:</h4>
                            <hr class="my-4" />
                            <dl class="space-y-4">
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Khối:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.Department.DepartmentName || 'N/A'}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Tên Lớp:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.ClassName}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Năm Học:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.AcademicYear}</dd>
                                </div>
                                <div class="flex flex-col sm:flex-row sm:items-start">
                                    <dt class="w-full sm:w-1/3 font-medium text-gray-700 mb-1 sm:mb-0">Giáo Viên Chủ Nhiệm:</dt>
                                    <dd class="w-full sm:w-2/3 text-gray-900">${data.HomeroomTeacher}</dd>
                                </div>
                            </dl>

                            <h3 class="text-lg font-medium text-gray-900 mt-6 mb-4">Bạn có chắc chắc muốn xóa lớp học này không?</h3>
                        </div>
                    `;
                })
                .catch(error => {
                    content.innerHTML = `
                        <div class="flex items-center justify-center py-8">
                            <svg class="h-8 w-8 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span class="text-red-500">Có lỗi xảy ra khi tải thông tin lớp học.</span>
                        </div>
                    `;
                });
        }

        // Handle delete form submission
        document.getElementById('deleteForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const form = this;
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (response.ok) {
                    // Close the modal
                    document.getElementById('deleteModal').classList.add('hidden');
                    // Reload the page to show updated list
                    window.location.reload();
                } else {
                    throw new Error('Delete failed');
                }
            })
            .catch(error => {
                alert('Có lỗi xảy ra khi xóa lớp học. Vui lòng thử lại.');
            });
        });

        // Close delete modal when clicking the close button
        document.getElementById('closeDeleteModal').addEventListener('click', function() {
            document.getElementById('deleteModal').classList.add('hidden');
        });

        // Close delete modal when clicking cancel
        document.getElementById('cancelDelete').addEventListener('click', function() {
            document.getElementById('deleteModal').classList.add('hidden');
        });

        // Close delete modal when clicking outside
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
            }
        });

        // Update the delete link click handler
        document.querySelectorAll('a[href*="Delete"]').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const classId = this.href.split('/').pop();
                showDeleteConfirmation(classId);
            });
        });
    </script>
}
